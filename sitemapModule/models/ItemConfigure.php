<?php
/**
 * Created by PhpStorm.
 * User: maltsev
 * Date: 20.10.2017
 * Time: 12:03
 */

namespace webivan\sitemap\models;

use Yii;
use yii\base\Exception;
use yii\base\Model;
use yii\helpers\Html;

class ItemConfigure extends Model
{
    /**
     * Model namespace
     *
     * @property string
     */
    public $model;

    /**
     * ActiveQuery select
     *
     * @property string|array
     */
    public $select;

    /**
     * ActiveQuery where
     *
     * @property string|array
     */
    public $where;

    /**
     * @property array
     */
    public $urls;

    /**
     * @property \Closure
     */
    public $appendUrls;

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['model', 'select', 'urls'], 'required'],
            [['model'], 'string'],
            [['select', 'where'], 'validateArrayOrString'],
            ['appendUrls', 'filter', 'filter' => function ($value) {
                return is_callable($value) ? call_user_func($value) : null;
            }],
            [['urls', 'appendUrls'], 'safe']
        ];
    }

    /**
     * Validation type string or array
     */
    public function validateArrayOrString($attr)
    {
        $value = $this->{$attr};

        if (!is_array($value) && !is_string($value)) {
            $this->addError($attr, 'Array or string value');
        }
    }

    /**
     * @inheritdoc
     */
    public function afterValidate()
    {
        parent::afterValidate(); // TODO: Change the autogenerated stub

        if (!$this->hasErrors() && $this->appendUrls) {
            array_push($this->urls, ...$this->appendUrls);

            if (empty($this->urls)) {
                throw new Exception('Not valid urls, model ' . $this->model);
            }
        }
    }

    /**
     * Get item query data
     *
     * @return \Generator
     */
    public function getDatas()
    {
        if (!class_exists($this->model)) {
            throw new Exception('Undefined model ' . $this->model);
        }

        $className = $this->model;

        $query = $className::find()
            ->select($this->select)
            ->asArray();

        if ($this->where) {
            $query->where($this->where);
        }

        $queryCommand = $query->createCommand()->query();

        while ($row = $queryCommand->read()) {
            $item = [];

            foreach ($row as $key => $value) {
                $item['{' . $key . '}'] = $value;
            }

            $returnValue = array_map(function ($url) use ($item) {
                return $this->toolItemUrl($url, $item);
            }, $this->urls);

            // return all url firts item
            yield self::createObjectUrls($returnValue);
        }
    }

    /**
     * Parse values
     *
     * @param array $url
     * @param array $item
     * @return array
     */
    public function toolItemUrl(array $url, array $item)
    {
        foreach ($url as $key => &$value) {
            $value = strtr($value, $item);
        }

        return $url;
    }

    /**
     * Validation urls
     *
     * @param array $urls
     * @return array
     */
    public static function createObjectUrls(array $urls)
    {
        $component = Yii::$app->sitemapComponent;

        $collections = [];

        foreach ($urls as $item) {
            if (empty($item['priority']) && $component->defaultPriority) {
                $item['priority'] = $component->defaultPriority;
            }

            $item['loc'] = rtrim($component->domain, '/') . (
                empty($item['loc']) || $item['loc'] == '/' ? '' : $item['loc']
            );

            $model = new ItemUrlConfigure();
            $model->setAttributes($item);

            if ($model->validate()) {
                $collections[] = $model;
            } else {
                Yii::error(Html::errorSummary($model), 'sitemap');
            }
        }

        return $collections;
    }
}